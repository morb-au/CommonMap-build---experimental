#!/bin/bash
#
# A Script to build the base RightScale CentOS 5.4 Amazon Machine Image 
#       ami-f8b35e91 (32 bit)
#     or
#       ami-ccb35ea5 (64 bit)
#   Modified by the base rebuild script
#       rc.dynamic.rebuild.local
#     or
#       rc.dynamic.rebuild.x64.local
#   And able to connect to a database instance prepared by
#     rc.dynamic.rebuild.db-tile.local
# Into a "tile" server for CommonMap purposes
#   http://commonmap.info/w/index.php/Server/Setup/Demonstration/AWS

# Copyright Brendan Morley (morb_au), 2010
#
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.



# Variables

# Take common variables from included bash scripts
DIR="$( cd "$( dirname "$0" )" && pwd )"
source $DIR/rc.dynamic.environment.inc.sh
source $DIR/../local/secrets.$CM_ENV.inc.sh
source $DIR/../local/settings.$CM_ENV.inc.sh

PGSQL_SERVICE_HOST=db-tile.private.$CM_ENV.commonmap.org            # TODO: Does osm2pgsql handle remote databases anyway?
PGSQL_SERVICE_PORT=5434

if [ $( arch ) = 'x86_64' ]; then
  EC2_ARCH=x86_64
else
  EC2_ARCH=i386
fi


#### Establish tile service
echo "####" 
echo "#### Establish tile service" 
echo "####" 
date 


# Create directory


## Install osm2pgsql


# Create and attach EBS volume.  Method inspired by:
# http://alestic.com/2010/02/ec2-resize-running-ebs-root
EBS_VOLUME_ID=$(ec2-create-volume --availability-zone $EC2_AVAILABILITY_ZONE --size $EBS_SIZE_GB_TILE -K $EC2_PRIVATE_KEY -C $EC2_CERT | cut -f2)
echo "New EBS volume created.  ID: $EBS_VOLUME_ID"

# Volume creation takes a little time so we have to try repeatedly
SELF_EC2_INSTANCE_ID=`curl http://169.254.169.254/latest/meta-data/instance-id` 
ec2-attach-volume --instance $SELF_EC2_INSTANCE_ID --device $EBS_DEVICE_PATH_TILE $EBS_VOLUME_ID -K $EC2_PRIVATE_KEY -C $EC2_CERT
while ! ec2-describe-volumes $EBS_VOLUME_ID -K $EC2_PRIVATE_KEY -C $EC2_CERT | grep -q attached; do sleep 1; done
echo "New EBS volume $EBS_VOLUME_ID attached to this EC2 instance $SELF_EC2_INSTANCE_ID as $EBS_DEVICE_PATH_TILE"

# Initialise the filesystem
mkfs.ext3 -F -L $EBS_EXT3_LABEL_TILE $EBS_DEVICE_PATH_TILE

echo "# Mounting new filesystem..." 
date

# Mount it
mkdir -p /mnt/$EBS_MOUNT_LOCATION_TILE 
mount $EBS_DEVICE_PATH_TILE /mnt/$EBS_MOUNT_LOCATION_TILE 

echo "# Mounted..." 
date


# New data directory for tiles
mkdir -p /mnt/$EBS_MOUNT_LOCATION_TILE/tiles/public
mkdir -p /var/www/commonmap/tile
ln -s /mnt/$EBS_MOUNT_LOCATION_TILE/tiles/public /var/www/commonmap/tile/public


#mkdir -p /var/www/commonmap/tile/public
chown -R apache:apache /var/www/commonmap/tile/public
chown -R apache:apache /mnt/$EBS_MOUNT_LOCATION_TILE/tiles


# Bounce the webserver
#
# TODO: This is probably needed because the webserver sees that a directory
#  has been mounted over.  Would be good to see if this is the actual reason. 
echo "# Bounce the webserver" 
date

service httpd restart









## Install mapnik
echo "## Install mapnik" 
date

# Add PostgreSQL 9.0 path for access to pg_config
# Should have no side-effect for PostgreSQL 8.x-only systems
PATH=/usr/pgsql-9.0/bin:$PATH


# Get mapnik's openstreetmap configuration

mkdir -p /var/www/commonmap/render
cd /var/www/commonmap/render
svn checkout http://svn.openstreetmap.org/applications/rendering/mapnik/ osm-mapnik

# Get mapnik dependencies
echo "## Get mapnik dependencies" 
date

yum -y install freetype-devel 
yum -y install libtool-ltdl-devel 
yum -y install libpng-devel 
yum -y install libicu-devel 
yum -y install python-devel 
yum -y install proj-devel 

# Get and build boost (mapnik dependency, takes 40 minutes on EC2 small instance)
echo "## Get and build boost" 
date

###########################
mkdir -p ~/download
cd ~/download
wget http://sourceforge.net/projects/boost/files/boost/1.42.0/boost_1_42_0.tar.bz2/download
# don't worry about a verbose untar; 'boost' has so many files!
#tar -jxvf boost_1_42_0.tar.bz2
tar -jxf boost_1_42_0.tar.bz2 
cd ~/download/boost_1_42_0

./bootstrap.sh --with-libraries=all 
echo "## Boost: bjam" 
date
./bjam 
echo "## Boost: bjam install" 
date
./bjam install 
###########################

# Get and build mapnik itself
echo "## Get and build mapnik itself" 
date

########
echo "## Mapnik: update ldconfig" 
date

case $EC2_ARCH in
i386)
echo "/usr/local/lib" >> /etc/ld.so.conf.d/mapnik.conf 
;;
x86_64)
# for libboost_python
echo "/usr/local/lib" >> /etc/ld.so.conf.d/mapnik.conf 
# for libmapnik
echo "/usr/local/lib64" >> /etc/ld.so.conf.d/mapnik.conf
;;
esac

ldconfig 

echo "## Mapnik: download and unpack" 
date

mkdir -p ~/download
cd ~/download
## OSM stylesheet c.September 2010 assumes Mapnik 0.7.1
#wget http://download.berlios.de/mapnik/mapnik-0.7.0.tar.bz2
#tar -jxvf mapnik-0.7.0.tar.bz2 
#cd ~/download/mapnik-0.7.0
wget http://download.berlios.de/mapnik/mapnik-0.7.1.tar.bz2
tar -jxvf mapnik-0.7.1.tar.bz2 
cd ~/download/mapnik-0.7.1

echo "## Mapnik: scons.py configure" 
date
python scons/scons.py configure 

echo "## Mapnik: scons.py" 
date
python scons/scons.py 

echo "## Mapnik: scons.py install" 
date
python scons/scons.py install 

ldconfig
########

##
## TODO: Stall until postgresql server is up.
## (or do the stall in rc.dynamic.tile.update-style.local)
## Right now it is pure luck that it takes longer to
## run this script up to here 
## compared to running the whole of
## rc.dynamic.rebuild.db-tile.local
## if both are started on similarly specified servers
## and this script is started second.
##


echo "## Mapnik: calling rc.dynamic.tile.update-style.local" 
date
# Update the mapnik style with a version with the CommonMapnik tweaks
/mnt/scripts/$CM_ENV/rc.dynamic.tile.update-style.local


##### No need to hack the OSM default mapnik settings for
##### coastlines; we've already copied our custom files over
## Tell mapnik not to use the basic OSM shapefiles
#
#cd /var/www/commonmap/render/osm-mapnik/inc
#sed -i 's/<!ENTITY layer-shapefiles SYSTEM "layer-shapefiles.xml.inc">//g' layers.xml.inc
#

### Already done in rc.dynamic.tile.update-style.local
## A hack to make 'generate_xml.py' work below.
#cd /var/www/commonmap/render/osm-mapnik/
#mkdir -p world_boundaries
#
## Bind mapnik to our rendering database
#echo "## Bind mapnik to our rendering database" 
#date
#
#cd /var/www/commonmap/render/osm-mapnik/
#python /var/www/commonmap/render/osm-mapnik/generate_xml.py osm.xml osm-local.xml --host $PGSQL_SERVICE_HOST --port $PGSQL_SERVICE_PORT --user mod_tile_pr --password $PGSQL_SERVICE_PASSWORD --dbname mod_tile_pr




## Install mod_tile
##   (Mapnik must be installed first)
echo "## Install mod_tile" 
date

# Build mod_tile

mkdir -p ~/download/svn 
cd ~/download/svn 
svn checkout http://svn.openstreetmap.org/applications/utils/mod_tile/
cd ~/download/svn/mod_tile 

# Adjust for RedHat architecture (even in x86_64 machine architecture)
sed -i "s/lib64/lib/g" render_config.h

echo "## make mod_tile (1st time)" 
date

make

## TODO: Speculative bid to make renderd work properly on i386
#rm renderd
#
#echo "## make mod_tile (2nd time)" 
#date
#
#make
#### TODO: Confirm that make is building items out of order.
####       Therefore 2nd time through works.

echo "## make install mod_tile" 
date

make install

# Bind mod_tile to webserver
echo "## Bind mod_tile to webserver" 
date

#cd ~/download/svn/mod_tile
#cp mod_tile.conf /etc/httpd/conf.d 
#sed -i "s/tile\.openstreetmap\.org/tile.$CM_ENV.commonmap.org/g" /etc/httpd/conf.d/mod_tile.conf
# Use our own mod_tile.conf file, not the one from OSM subversion
#  (including MGMaps-related rewrites)
cp /mnt/scripts/$CM_ENV/mod_tile.conf /etc/httpd/conf.d/
sed -i "s/tile\.production\.commonmap\.org/tile.$CM_ENV.commonmap.org/g" /etc/httpd/conf.d/mod_tile.conf


# Bind mod_tile to renderd
echo "## Bind mod_tile to renderd" 
date

cat <<EOL > /etc/renderd.conf

[renderd]
socketname=/var/run/renderd/renderd.sock
num_threads=4
# Storage area for meta tiles
tile_dir=/var/lib/mod_tile
stats_file=/var/run/renderd/renderd.stats

[mapnik]
plugins_dir=/usr/local/lib/mapnik/input
font_dir=/usr/local/lib/mapnik/fonts
font_dir_recurse=1

# Now go through the layers that mod_tile
# should serve.  The layers must be ordered
# with the deepest URIs first.

[example-second]
URI=/example-second/
XML=/var/www/commonmap/render/osm-mapnik/osm-local.xml
HOST=tile.development.a-subdomain.commonmap.org


[default]
URI=/
XML=/var/www/commonmap/render/osm-mapnik/osm-local.xml
HOST=tile.$CM_ENV.commonmap.org

EOL


# Bind the planet import to mod_tile
echo "## Bind the planet import to mod_tile" 
date

mkdir -p /var/lib/mod_tile
#touch /var/lib/mod_tile/planet-import-complete
chown -R apache:apache /var/lib/mod_tile
### TODO: Is chown really required here?



## Final configuration and bringup
echo "## Final configuration and bringup" 
date

# Assign file permissions to webserver

cd /var/www/commonmap/render
chown -R apache:apache * 
 
# Bounce the webserver

service httpd restart

# Bring up renderd as a daemon
echo "## Bring up renderd as a daemon" 
date

# mkdir -p /var/run/renderd
# ~/download/svn/mod_tile/renderd

# Add renderd to inittab respawn as it tends to crash often
mkdir -p /var/run/renderd
echo >> /etc/inittab
echo '# Commonmap, renderd' >> /etc/inittab
echo 'c0:2345:respawn:/root/download/svn/mod_tile/renderd -f' >> /etc/inittab
telinit q
#/root/download/svn/mod_tile/renderd


## Add mod_tile and renderd to munin statistics
echo "## Add mod_tile and renderd to munin statistics" 
date

# Copy munin plugins over
cd ~/download/svn/mod_tile/munin
cp mod_tile_* /etc/munin/plugins/
cp renderd_* /etc/munin/plugins/
# Note: Don't 'ln -s' the above as per the usual munin idiom,
# since the munin server won't be able to read into
# the root home directory.

# Pick up new munin state
service munin-node restart



mail -s "[commonmap-bots] tile.$CM_ENV.commonmap.org is built" root@commonmap.info < /mnt/instance/meta-data.log

#### Established tile service
echo "####" 
echo "#### Established tile service" 
echo "####" 
date 


# ENDS.
